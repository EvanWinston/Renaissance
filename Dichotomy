# Renaissance
//二分法查找
//在有序数组中查找某个数
//如果找到了就返回这个数的下标，找不到返回-1；
#include <stdio.h>    
int binary_search(int arr[], int k, int sz)
//此处的arr本质上是一个指针要用int *arr或者arr[]
{
	//算法的实现
	int left = 0;
	int right = sz - 1;
	while (left <= right)
	//应为“小于等于”，不能只是“小于”
	//本题中mid的值分别为下标4，7，6
	//若为小于，则第三次循环是下标left=6，right=6，left=right进不去
	//则最后结果输出为“找不到指定的数字”
	{
		int mid = (left + right) / 2;//中间元素的下标
		//mid = (left + right) / 2;不能放在while之外，因为mid的值不是固定的
		if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}

int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);
	//如果sz = sizeof(arr) / sizeof(arr[0]);放在调用函数的开头，
	//在32bit的操作系统下sizeof（arr）为4，sizeof（arr[0]）的数字‘1’是4个字节
	//所以sz = sizeof(arr) / sizeof(arr[0])的结果为1，且最终输出结果为“找不到指定的数字”
	int ret = binary_search(arr, k, sz);//arr传递过去的是数组arr首元素的地址，即“1”
	if (ret == -1)
	{
		printf("找不到指定的数字\n");
	}
	else
	{
		printf("找到了指定的数字，其下标是：%d\n", ret);
	}
	return 0;
}
