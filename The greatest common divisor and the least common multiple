# Renaissance
#include <stdio.h>
int main()
{
	int p, r, m = 0, n = 0, t;
	printf("请输入任意的两个正整数:");
	scanf("%d%d", &m, &n);
	if (n < m)
	{
		t = n;
		n = m;
		m = t;
	}
	p = n * m;
	while (m != 0)
	{
		r = n % m;
		n = m;
		m = r;
	}
	printf("它们的最大公约数是：%d\n", n);
	printf("它们的最小公倍数是：%d\n", p / n);
	return 0;
}

计算两个数的最大公约数
根据约数的定义可知，某个数的所有约数必不大于这个数本身，
几个自然数的最大公约数必不大于其中任何一个数。
要求任意两个正整数的最大公约数即求出一个不大于其中两者中的任何一个，
但又能同时整除两个整数的最大自然数。
算法思路：按照从大（两个整数中较小的数）到小（到最小的整数1）的顺序
求出第一个能同时整除两个整数的自然数，即为所求。
#include<stdio.h>
int main()
{
    int m, n, temp, i;
    printf("请输入任意2个数:");
    scanf("%d%d", &m, &n);
    if (m < n)  /*比较大小，使得m中存储大数，n中存储小数*/
    { /*交换m和n的值*/
        temp = m;
        m = n;
        n = temp;
    }
    for (i = n; i > 0; i--)  /*按照从大到小的顺序寻找满足条件的自然数*/
        if (m % i == 0 && n % i == 0)
        {/*输出满足条件的自然数并结束循环*/
            printf("%d 和 %d 的最大公约数为: %d\n", m, n, i);
            break;
        }
    return 0;
}

思路：求任意两个正整数的最小公倍数，
即求出一个最小的能同时被两整数整除的自然数。
#include<stdio.h>
int main()
{
    int m, n, temp, i;
    printf("请输入任意2个数:");
    scanf("%d%d", &m, &n);
    if (m < n)  /*比较大小，使得m中存储大数，n中存储小数*/
    { /*交换m和n的值*/   
        temp = m;
        m = n;
        n = temp;
    }
    for (i = m; i > 0; i++)  /*从大数开始寻找满足条件的自然数*/
    if (i % m == 0 && i % n == 0)
    {/*输出满足条件的自然数并结束循环*/
        printf("%d 和 %d 的最小公倍数为: %d\n", m, n, i);
        break;
    }
    return 0;
}
